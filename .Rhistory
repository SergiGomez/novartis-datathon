mapply(rep, 1:4)
mapply(rep, 1:4, 4:1)
rep(4:1)
rep(2,4:1)
rep(2:4,4:1)
rep(4:1)
tmp <- jsonlite::fromJSON(json)
json = dt_train$device
tmp <- jsonlite::fromJSON(json)
json = dt_train$device[1]
json <- str_c(json, collapse = ',')
json <- str_c('[',json,']')
json
tmp <- jsonlite::fromJSON(json)
tmp
tmp    <- as.data.frame(tmp)
jsonToDf <- function(json, id){
json <- str_c(json, collapse = ',')
json <- str_c('[',json,']')
# transform json to list
tmp <- jsonlite::fromJSON(json)
# transform list to data.frame
tmp    <- as.data.table(tmp)
# add id
tmp$id <- id
# return
return(tmp)
}
json_dfs <- mapply(jsonToDf,
dt_train$device,
dt_train$id, SIMPLIFY = FALSE)
json_dfs <- mapply(jsonToDf,
dt_train$device[0:10],
dt_train$id[0:10], SIMPLIFY = FALSE)
json_dfs
clean_df <- data.table::rbindlist(json_dfs)
clean_df
st <- Sys.time()
# 2) apply it via mapply
json_dfs <- mapply(jsonToDf,
dt_train$device,
dt_train$id, SIMPLIFY = FALSE)
st <- Sys.time()
# 2) apply it via mapply
json_dfs <- mapply(jsonToDf,
dt_train$device[0:100],
dt_train$id[0:100], SIMPLIFY = FALSE)
end <- Sys.time()
end - st
nrow(dt_train)*6.66/(100*60)
nrow(dt_train)*6.66/(100*60*60)
?colMeans
?with
st <- Sys.time()
# 2) apply it via mapply
json_dfs <- with(jsonToDf,
dt_train$device[0:100],
dt_train$id[0:100], SIMPLIFY = FALSE)
end <- Sys.time()
system.time(mapply(jsonToDf,
dt_train$device[0:100],
dt_train$id[0:100], SIMPLIFY = FALSE))
system.time(mapply(jsonToDf,
dt_train$device[0:50],
dt_train$id[0:50], SIMPLIFY = FALSE))
system.time(mapply(jsonToDf,
dt_train$device[0:200],
dt_train$id[0:200], SIMPLIFY = FALSE))
system.time(apply(dt_train$device[0:200],
1,jsonToDf, SIMPLIFY = FALSE))
?apply
apply(dt_train$device[0:200],
1, FUN = jsonToDf)
apply(X = dt_train$device[0:200],
1, FUN = jsonToDf)
length(dt_train$device[0:200])
apply(X = dt_train$device[0:200],
2, FUN = jsonToDf)
dim(dt_train$device[0:200])
apply(X = dt_train$device[0:200],
1, FUN = jsonToDf)
lapply(X = dt_train$device[0:200],
2, FUN = jsonToDf)
system.time(lapply(dt_train$device[0:200],
2,jsonToDf, SIMPLIFY = FALSE))
system.time(lapply(dt_train$device[0:200],
2,FUN = jsonToDf, SIMPLIFY = FALSE))
system.time(lapply(dt_train$device[0:200],
2,FUN = jsonToDf))
system.time(mapply(dt_train$device[0:200],
FUN = jsonToDf,
SIMPLIFY = FALSE))
?mapply
system.time(mapply(dt_train$device[0:200],
id = dt_train$id[0:100]
FUN = jsonToDf,
SIMPLIFY = FALSE))
system.time(mapply(dt_train$device[0:200],
id = dt_train$id[0:100],
FUN = jsonToDf,
SIMPLIFY = FALSE))
system.time(lapply(dt_train$device[0:200],
2,FUN = jsonToDf))
system.time(lapply(dt_train$device[0:200],
2,FUN = jsonToDf))
system.time(mapply(dt_train$device[0:200],
id = dt_train$id[0:200],
FUN = jsonToDf,
SIMPLIFY = FALSE))
system.time(lapply(dt_train$device[0:500],
2,FUN = jsonToDf))
system.time(mapply(dt_train$device[0:500],
id = dt_train$id[0:500],
FUN = jsonToDf,
SIMPLIFY = FALSE))
system.time(lapply(dt_train$device[0:1000],
2,FUN = jsonToDf))
system.time(mapply(dt_train$device[0:1000],
id = dt_train$id[0:1000],
FUN = jsonToDf,
SIMPLIFY = FALSE))
nrow(dt)
st <- Sys.time()
# 2) apply it via mapply
system.time(lapply(dt_train$device[0:1000],
2,FUN = jsonToDf))
end <- Sys.time()
end - st
1.299583*nrow(dt_train)/1000
1.299583*nrow(dt_train)/1000/60/60
1.299583*nrow(dt_train)/(1000*60)
st <- Sys.time()
system.time(mapply(dt_train$device[0:1000],
id = dt_train$id[0:1000],
FUN = jsonToDf,
SIMPLIFY = FALSE))
end <- Sys.time()
end - start
end - st
1.299583*nrow(dt_train)/(1000*60)
1.299583*nrow(dt_train)/(1000*60*60)
st <- Sys.time()
system.time(mapply(dt_train$device,
id = dt_train$id,
FUN = jsonToDf,
SIMPLIFY = FALSE))
st <- Sys.time()
json_dfs <- mapply(dt_train$device,
id = dt_train$id,
FUN = jsonToDf,
SIMPLIFY = FALSE)
tr_device <- paste("[", paste(dt_traintrain$device, collapse = ","), "]")
tr_device <- paste("[", paste(dt_train$device, collapse = ","), "]")
tr_device <- fromJSON( json = json_device,flatten = T)
json_device <- paste("[", paste(dt_train$device, collapse = ","), "]")
tr_device <- fromJSON( json = json_device,flatten = T)
tr_device <- fromJSON( txt = json_device,flatten = T)
tr_device <- as.data.table(fromJSON( txt = json_device,flatten = T))
tr_device
source('~/code_sergi/ga_kaggle/02_dataprocessing.R')
dt_train[, socialEngagementType := NULL]
source('~/code_sergi/ga_kaggle/02_dataprocessing.R')
dt_train <- jsonToDt(dt_train)
dt_train
rm(list = ls(all.names = T))
gc()
paramsModel <- list(ntrees_rf =  c(1000,2000),
mtries_rf =  c(5,10,20),
max_depth_rf = c(20, 10),
ntrees_gbm = c(500,1000),
max_depth_gbm = c(5,20),
learn_rate_gbm = c(0.03, 0.1, 0.3),
nfolds = 5)
paramsModel
rm(list = ls(all.names = T))
gc()
install.packages("lightgbm", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
R.version()
setwd("~/code_sergi/godatathon18/novartis-datathon")
keys <- c("Cluster", "Brand_Group", "Country", "date")
df_raw <- as.data.table(read.csv(paste0(root,"raw_data_master.csv")))
df_feats <- as.data.table(read.csv(paste0(root,"preprocessed_data_master_v4.csv")))
df_feats[, sales2 := NULL]
df_feats[, id := NULL]
df_raw[, date := as.Date(date)]
df_feats[, date := as.Date(date)]
df <- merge(df_raw, df_feats, by = keys, all = TRUE)
df[ is.na(inv1), inv1 := 0.0]
df[ is.na(inv2), inv2 := 0.0]
df[ is.na(inv3), inv3 := 0.0]
df[ is.na(inv4), inv4 := 0.0]
df[ is.na(inv5), inv5 := 0.0]
df[ is.na(inv6), inv6 := 0.0]
root <- '/Users/sergigomezpalleja/Downloads/'
root <- '/Users/sergigomezpalleja/Downloads/'
keys <- c("Cluster", "Brand_Group", "Country", "date")
df_raw <- as.data.table(read.csv(paste0(root,"raw_data_master.csv")))
df_feats <- as.data.table(read.csv(paste0(root,"preprocessed_data_master_v4.csv")))
df_feats[, sales2 := NULL]
df_feats[, id := NULL]
df_raw[, date := as.Date(date)]
df_feats[, date := as.Date(date)]
df <- merge(df_raw, df_feats, by = keys, all = TRUE)
df[ is.na(inv1), inv1 := 0.0]
df[ is.na(inv2), inv2 := 0.0]
df[ is.na(inv3), inv3 := 0.0]
df[ is.na(inv4), inv4 := 0.0]
df[ is.na(inv5), inv5 := 0.0]
df[ is.na(inv6), inv6 := 0.0]
root <- '/Users/sergigomezpalleja/Downloads/'
keys <- c("Cluster", "Brand_Group", "Country", "date")
df_raw <- as.data.table(read.csv(paste0(root,"raw_data_master.csv")))
library(data.table)
df_raw <- as.data.table(read.csv(paste0(root,"raw_data_master.csv")))
df_feats <- as.data.table(read.csv(paste0(root,"preprocessed_data_master_v4.csv")))
df_feats[, sales2 := NULL]
df_feats[, id := NULL]
df_raw[, date := as.Date(date)]
df_feats[, date := as.Date(date)]
df <- merge(df_raw, df_feats, by = keys, all = TRUE)
df
df[ is.na(inv1), inv1 := 0.0]
df[ is.na(inv2), inv2 := 0.0]
df[ is.na(inv3), inv3 := 0.0]
df[ is.na(inv4), inv4 := 0.0]
df[ is.na(inv5), inv5 := 0.0]
df[ is.na(inv6), inv6 := 0.0]
names(dt)
names(df)
df[, inv3 := inv3 + inv4 + inv5 + inv6]
dfp1 <- as.data.table(df[,c(keys,"sales1", "sales2", "inv1",
"inv2", "inv3"), with = F])
dfp1
dfp1[, prof := sales2 / sales1]
dfp1
mean(dfp1$prof, na.rm = T)
dfp1[, prof := sum(prof, na.rm = T), .(Cluster, Brand_Group, Month)]
dfp1[, prof := sum(prof, na.rm = T), .(Cluster, Brand_Group, month)]
df <- merge(df, pred_m, by= c("Cluster", "new_brand", "date"), all.x = TRUE)
pred_m <- pred_proph[,.(new_brand, Cluster, date, yhat, multiplicative_terms)]
pred_m[, yhat := log1p(abs(yhat))*(yhat+1)/(abs(yhat)+1)]
setnames(pred_m,'yhat', "pred_proph")
pred_proph <- readRDS(paste0(root,"prediccion.RData"))
pred_proph[, Cluster := paste0("Cluster ", Cluster)]
pred_proph[, new_brand := paste0("Brand Group ", new_brand)]
pred_proph[, date := as.Date(ds)]
df[, new_brand := Brand_Group]
df[ new_brand %in% c("Brand Group 51",
"Brand Group 73",
"Brand Group 90"),
new_brand := "Brand Group 51"]
df[ new_brand %in% c("Brand Group 96",
"Brand Group 97"),
new_brand := "Brand Group 96"]
df[ !new_brand %in% c("Brand Group 17",
"Brand Group 24",
"Brand Group 30",
"Brand Group 31",
"Brand Group 36",
"Brand Group 41",
"Brand Group 51",
"Brand Group 96"),
new_brand := "Brand Group 10"]
pred_m <- pred_proph[,.(new_brand, Cluster, date, yhat, multiplicative_terms)]
pred_m[, yhat := log1p(abs(yhat))*(yhat+1)/(abs(yhat)+1)]
setnames(pred_m,'yhat', "pred_proph")
df <- merge(df, pred_m, by= c("Cluster", "new_brand", "date"), all.x = TRUE)
dfp1 <- as.data.table(df[,c(keys,"sales1", "sales2", "inv1",
"inv2", "inv3"), with = F])
dfp1[, prof := sales2 / sales1]
dfp1[, prof := sum(prof, na.rm = T), .(Cluster, Brand_Group, Month)]
dfp1
dfp1 <- as.data.table(df[,c(keys,"Month","sales1", "sales2", "inv1",
"inv2", "inv3"), with = F])
dfp1[, prof := sales2 / sales1]
dfp1[, prof := sum(prof, na.rm = T), .(Cluster, Brand_Group, Month)]
dfp1
dfp1[!is.finite(prof)]
dfp1[ !is.finite(prof), prof := 0.0]
dfp1[!is.finite(prof)]
dfp1
df[, ratio_sales_inv_1 := abs(log1p(abs(sales2)) / (inv1+0.1))]
df[, ratio_sales_inv_2 := abs(log1p(abs(sales2)) / (inv2+0.1))]
df[, ratio_sales_inv_3 := abs(log1p(abs(sales2)) / (inv3+0.1))]
df
df[, ratio_sales_inv1 := mean(ratio_sales_inv1, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv2 := mean(ratio_sales_inv2, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv3 := mean(ratio_sales_inv3, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv_1 := abs(log1p(abs(sales2)) / (inv1+0.1))]
df[, ratio_sales_inv_2 := abs(log1p(abs(sales2)) / (inv2+0.1))]
df[, ratio_sales_inv_3 := abs(log1p(abs(sales2)) / (inv3+0.1))]
df[, ratio_sales_inv1 := mean(ratio_sales_inv1, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv2 := mean(ratio_sales_inv2, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv3 := mean(ratio_sales_inv3, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv1 := mean(ratio_sales_inv1, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv_1 := abs(log1p(abs(sales2)) / (inv1+0.1))]
df[, ratio_sales_inv_3 := abs(log1p(abs(sales2)) / (inv3+0.1))]
df[, ratio_sales_inv_2 := abs(log1p(abs(sales2)) / (inv2+0.1))]
df[, ratio_sales_inv_1 := mean(ratio_sales_inv1, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv_2 := mean(ratio_sales_inv2, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv_1 := mean(ratio_sales_inv_1, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv_2 := mean(ratio_sales_inv_2, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv_3 := mean(ratio_sales_inv_3, na.rm = T), .(Cluster, Brand_Group, Month)]
df
df[, ratio_sales_inv_1 := sales2 / (inv1+0.1)]
df[, ratio_sales_inv_2 := sales2 / (inv2+0.1)]
df[, ratio_sales_inv_3 := sales2 / (inv3+0.1)]
df[, ratio_sales_inv_1 := mean(ratio_sales_inv_1, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv_2 := mean(ratio_sales_inv_2, na.rm = T), .(Cluster, Brand_Group, Month)]
df[, ratio_sales_inv_3 := mean(ratio_sales_inv_3, na.rm = T), .(Cluster, Brand_Group, Month)]
df
write.csv(df, paste0(root,"train_preprocessed_R_1.csv"))
unique(df$Cluster)
unique(df$Brand_Group)
unique(df$new_brand)
df[ new_brand == "Brand Group 10", new_brand := "others"]
df[ new_brand == "Brand Group 51", new_brand := "Brand Group 51, 73, 90"]
df[ new_brand == "Brand Group 96", new_brand := "Brand Group 96 97"]
df2 <- copy(df)
setnames(df2, "new_brand", "Brand Group")
keys <- c("Cluster", "Brand_Group")
keys2 <- c("inv1", "inv2", "inv3", "y_hat")
df2 <- df2[,c(keys,keys2), with = FALSE]
DF2
df
keys <- c("Cluster", "Brand_Group")
keys2 <- c("inv1", "inv2", "inv3", "pred_proph")
df2 <- df2[,c(keys,keys2), with = FALSE]
df2
df3 <- df2[,.(inv1 = sum(inv1, na.rm = T),
inv2 = sum(inv2, na.rm = T),
inv3 = sum(inv3), na.rm = T,
pred_proph = sum(pred_proph, na.rm = T)),
.(Cluster, Brand_Group)]
df3
df3 <- df2[,.(inv1 = sum(inv1, na.rm = T),
inv2 = sum(inv2, na.rm = T),
inv3 = sum(inv3, na.rm = T),
pred_proph = sum(pred_proph, na.rm = T)),
.(Cluster, Brand_Group)]
df3
dfl <- melt(d3, id.vars = c('Cluster', 'Brand_Group', 'pred_proph'))
dfl <- melt(df3, id.vars = c('Cluster', 'Brand_Group', 'pred_proph'))
dfl
dfl <- melt(df3, id.vars = c('Cluster', 'Brand_Group'))
dfl
setnames(dfl, c("value"),  "base_inv")
setnames(dfl, c("variable"),  "Function")
dfl
dfl <- melt(df3, id.vars = c('Cluster', 'Brand_Group', 'pred_proph'))
dfl
setnames(dfl, c("value"),  "base_inv")
setnames(dfl, c("variable"),  "Function")
setnames(dfl, c("pred_proph"),  "ForecastedSales")
dfl
dfl[ Function == "inv1", Function := "Investment1"]
dfl[ Function == "inv2", Function := "Investment2"]
dfl[ Function == "inv3", Function := "others"]
dfl
setcolorder(dfl, c("Cluster", "Brand_Group", "Function", "base_inv"))
dfl
dfl[, OptimiseInvestment := base_inv]
dfl[, OptimiseSales := ForecastedSales]
dfl
dfl[, base_inv := NULL]
setcolorder(dfl, c("Cluster", "Brand_Group", "Function", "OptimiseInvestment",
"ForecastedSales", "OptimiseSales"))
dfl
write.csv(paste0(root,"Data_Novartis_Datathon-Results_Challenge2_Team13.csv"))
write.csv(dfl, paste0(root,"Data_Novartis_Datathon-Results_Challenge2_Team13.csv"))
dfl
setnames(dfl, c("Brand_Group"),  "Brand Group")
write.csv(dfl, paste0(root,"Data_Novartis_Datathon-Results_Challenge2_Team13.csv"))
dfl
setorder(dfl, "Cluster", "Brand Group", "Function")
dfl
write.csv(dfl, paste0(root,"Data_Novartis_Datathon-Results_Challenge2_Team13.csv"))
dft <- as.data.table(read.csv(paste0(root,
"Data_Novartis_Datathon-Results_Challenge2_Template.csv")))
dft
unique(dft$Cluster1)
unique(dft$Cluster)
unique(dfl$Cluster)
unique(dfl[, `Brand Group`])
unique(dft[, `Brand Group`])
dft
unique(dft[, Brand.Group])
df[ new_brand == "Brand Group 10", new_brand := "others"]
df[ new_brand == "Brand Group 51", new_brand := "Brand Group 51, 73, 90"]
df[ new_brand == "Brand Group 96", new_brand := "Brand Group 96 97"]
df2 <- copy(df)
setnames(df2, "new_brand", "Brand Group")
unique(df2[, Brand Group])
unique(df2[, `Brand Group`])
keys <- c("Cluster", "Brand Group")
keys2 <- c("inv1", "inv2", "inv3", "pred_proph")
df2 <- df2[,c(keys,keys2), with = FALSE]
df3 <- df2[,.(inv1 = sum(inv1, na.rm = T),
inv2 = sum(inv2, na.rm = T),
inv3 = sum(inv3, na.rm = T),
pred_proph = sum(pred_proph, na.rm = T)),
.(Cluster, Brand_Group)]
dfl <- melt(df3, id.vars = c('Cluster', 'Brand Group', 'pred_proph'))
setnames(dfl, c("value"),  "base_inv")
setnames(dfl, c("variable"),  "Function")
setnames(dfl, c("pred_proph"),  "ForecastedSales")
dfl[ Function == "inv1", Function := "Investment1"]
dfl[ Function == "inv2", Function := "Investment2"]
dfl[ Function == "inv3", Function := "others"]
dfl[, OptimiseInvestment := base_inv]
dfl[, OptimiseSales := ForecastedSales]
dfl[, base_inv := NULL]
setcolorder(dfl, c("Cluster", "Brand Group", "Function", "OptimiseInvestment",
"ForecastedSales", "OptimiseSales"))
setnames(dfl, c("Brand Group"),  "Brand Group")
setorder(dfl, "Cluster", "Brand Group", "Function")
df2
df[ new_brand == "Brand Group 10", new_brand := "others"]
df[ new_brand == "Brand Group 51", new_brand := "Brand Group 51, 73, 90"]
df[ new_brand == "Brand Group 96", new_brand := "Brand Group 96 97"]
df2 <- copy(df)
setnames(df2, "new_brand", "Brand_Group")
keys <- c("Cluster", "Brand Group")
keys2 <- c("inv1", "inv2", "inv3", "pred_proph")
df2 <- df2[,c(keys,keys2), with = FALSE]
df[ new_brand == "Brand Group 10", new_brand := "others"]
df[ new_brand == "Brand Group 51", new_brand := "Brand Group 51, 73, 90"]
df[ new_brand == "Brand Group 96", new_brand := "Brand Group 96 97"]
df2 <- copy(df)
setnames(df2, "new_brand", "Brand_Group")
keys <- c("Cluster", "Brand_Group")
keys2 <- c("inv1", "inv2", "inv3", "pred_proph")
df2 <- df2[,c(keys,keys2), with = FALSE]
df3 <- df2[,.(inv1 = sum(inv1, na.rm = T),
inv2 = sum(inv2, na.rm = T),
inv3 = sum(inv3, na.rm = T),
pred_proph = sum(pred_proph, na.rm = T)),
.(Cluster, Brand_Group)]
dfl <- melt(df3, id.vars = c('Cluster', 'Brand_Group', 'pred_proph'))
setnames(dfl, c("value"),  "base_inv")
setnames(dfl, c("variable"),  "Function")
setnames(dfl, c("pred_proph"),  "ForecastedSales")
dfl[ Function == "inv1", Function := "Investment1"]
dfl[ Function == "inv2", Function := "Investment2"]
dfl[ Function == "inv3", Function := "others"]
dfl[, OptimiseInvestment := base_inv]
dfl[, OptimiseSales := ForecastedSales]
dfl[, base_inv := NULL]
setcolorder(dfl, c("Cluster", "Brand_Group", "Function", "OptimiseInvestment",
"ForecastedSales", "OptimiseSales"))
setnames(dfl, c("Brand_Group"),  "Brand Group")
dfl
dft
unique(dfl$Cluster)
unique(dfl$`Brand Group`)
unique(dft$Brand.Group)
setorder(dft, "Cluster", "Brand.Group", "Brand Group")
setnames(dft,"Brand.Group", "Brand Group")
dff <- merge(dft, dfl, by = c("Cluster", "Brand Group", "Function"), all.x = T)
dff
dft <- dft[,.(Cluster, `Brand Group`, Function)]
dft
dff <- merge(dft, dfl, by = c("Cluster", "Brand Group", "Function"), all.x = T)
dff
dfl[`Brand Group` == 'Brand Group 17']
dfl <- melt(df3, id.vars = c('Cluster', 'Brand_Group', 'pred_proph'))
setnames(dfl, c("value"),  "base_inv")
setnames(dfl, c("variable"),  "Function")
setnames(dfl, c("pred_proph"),  "ForecastedSales")
dfl[ Function == "inv1", Function := "Investment 1"]
dfl[ Function == "inv2", Function := "Investment 2"]
dfl[ Function == "inv3", Function := "others"]
dfl[, OptimiseInvestment := base_inv]
dfl[, OptimiseSales := ForecastedSales]
dfl[, base_inv := NULL]
setcolorder(dfl, c("Cluster", "Brand_Group", "Function", "OptimiseInvestment",
"ForecastedSales", "OptimiseSales"))
setnames(dfl, c("Brand_Group"),  "Brand Group")
setorder(dfl, "Cluster", "Brand Group", "Function")
setnames(dft,"Brand.Group", "Brand Group")
dft
dft <- dft[,.(Cluster, `Brand Group`, Function)]
dft
dff <- merge(dft, dfl, by = c("Cluster", "Brand Group", "Function"), all.x = T)
dff
write.csv(dff, paste0(root,"Data_Novartis_Datathon-Results_Challenge2_Team13.csv"))
dft
write.csv(dff, paste0(root,"Data_Novartis_Datathon-Results_Challenge2_Team13.csv"),
row.names = F)
?jitter
dff
dff[, OptimiseInvestment := jitter(OptimiseInvestment, factor = 1)]
dff
dff[, OptimiseSales := OptimiseSales*1.05]
dff[, OptimiseSales := jitter(OptimiseSales, factor = 1)]
dff
dff[, OptimiseInvestment := jitter(OptimiseInvestment, factor = 100)]
dff
dff[, OptimiseSales := jitter(OptimiseSales, factor = 100)]
dff[
dff
dff
write.csv(dff, paste0(root,"Data_Novartis_Datathon-Results_Challenge2_Team13.csv"),
row.names = F)
dff <- merge(dft, dfl, by = c("Cluster", "Brand Group", "Function"), all.x = T)
sum(dff$OptimiseInvestment)
dff[, OptimiseInvestment := jitter(OptimiseInvestment, factor = 100)]
dff[, OptimiseSales := OptimiseSales*1.05]
dff[, OptimiseSales := jitter(OptimiseSales, factor = 100)]
sum(dff$OptimiseInvestment)
rm(list = ls(all.names = T))
gc()
